{"ast":null,"code":"var _jsxFileName = \"/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\nimport Geocode from \"react-geocode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Container = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const APP_URL = 'http://localhost:5000/weather/';\n  Geocode.setApiKey(\"AIzaSyANbc8ynnbm7NkHY0qUYSjnfzMfjxyh8Tg\");\n  Geocode.setLanguage(\"en\");\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n      }, error => {\n        setLatitude(-1);\n        setLongitude(-1);\n      });\n    } else {\n      setLatitude(-1);\n      setLongitude(-1);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n  useEffect(() => {\n    Geocode.fromLatLng(latitude, longitude).then(response => {\n      const address = response.results[0].formatted_address;\n      let city, country;\n\n      for (let i = 0; i < response.results[0].address_components.length; i++) {\n        for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n          switch (response.results[0].address_components[i].types[j]) {\n            case \"locality\":\n              city = response.results[0].address_components[i].long_name;\n              break;\n\n            case \"country\":\n              country = response.results[0].address_components[i].long_name;\n              break;\n          }\n        }\n      }\n\n      console.log(city, country);\n      console.log(address);\n    }, error => {\n      console.error(error);\n    });\n  }, [longitude, latitude]);\n  useEffect(() => {\n    fetch(APP_URL + `?lat=${latitude}&long=${longitude}`).then(response => response.json()).then(forcast => {\n      console.log(forcast);\n    });\n  }, [longitude, latitude]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      className: \"header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-bg\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"header-bgImg\",\n        src: MainBG\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MainBanner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Forcast, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Container, \"/vXk1JS1zKpX9jLmF0scB8eSYio=\");\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js"],"names":["React","useEffect","useState","Header","MainBanner","Forcast","MainBG","Geocode","Container","loading","setLoading","latitude","setLatitude","longitude","setLongitude","APP_URL","setApiKey","setLanguage","getLocation","navigator","geolocation","getCurrentPosition","position","coords","error","fromLatLng","then","response","address","results","formatted_address","city","country","i","address_components","length","j","types","long_name","console","log","fetch","json","forcast"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\nimport Geocode from \"react-geocode\";\n\nconst Container = () => {\n   \n    const [loading, setLoading] = useState(false);\n    const [latitude,setLatitude]=useState(null);\n    const [longitude,setLongitude]=useState(null);\n \n    const APP_URL = 'http://localhost:5000/weather/';\n    Geocode.setApiKey(\"AIzaSyANbc8ynnbm7NkHY0qUYSjnfzMfjxyh8Tg\");\n    Geocode.setLanguage(\"en\");\n\n    \n\n  const getLocation=()=>{\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n        \n              setLatitude(position.coords.latitude);\n              setLongitude(position.coords.longitude);\n            \n          },\n          (error) => {\n            setLatitude(-1);\n            setLongitude(-1);\n          }\n        );\n      } else {\n        setLatitude(-1);\n        setLongitude(-1);\n      }\n    }\n  \n\n    useEffect(()=>{\n      getLocation();\n    },[])\n\n    useEffect(()=>{\n      Geocode.fromLatLng(latitude, longitude).then(\n        (response) => {\n          const address = response.results[0].formatted_address;\n          let city, country;\n          for (let i = 0; i < response.results[0].address_components.length; i++) {\n            for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n              switch (response.results[0].address_components[i].types[j]) {\n                case \"locality\":\n                  city = response.results[0].address_components[i].long_name;\n                  break;\n             \n                case \"country\":\n                  country = response.results[0].address_components[i].long_name;\n                  break;\n              }\n            }\n          }\n          console.log(city, country);\n          console.log(address);\n        },\n        (error) => {\n          console.error(error);\n        }\n      );\n      \n    },[longitude,latitude])\n\n    useEffect(()=>{\n\n     fetch(APP_URL+`?lat=${latitude}&long=${longitude}`)\n     .then(response=>response.json())\n     .then(forcast=>{\n       console.log(forcast)\n     })\n    },[longitude,latitude])\n    \n    return (\n        <div className=\"container\">\n            <Header className=\"header\"/>\n            <div className=\"header-bg\">\n                <img className=\"header-bgImg\" src={MainBG} />\n            </div>\n            <MainBanner />\n            <Forcast />\n        </div>\n    );\n};\nexport default Container;"]},"metadata":{},"sourceType":"module"}