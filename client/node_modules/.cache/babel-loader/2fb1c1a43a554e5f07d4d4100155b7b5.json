{"ast":null,"code":"var _jsxFileName = \"/home/elgohary/Noran-Task/insta-weather/client/src/components/ForcastCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport IconSrc from \"../imgs/weather-icons/cloudy.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForcastCard = props => {\n  _s();\n\n  const {\n    icon,\n    temp,\n    title,\n    type\n  } = props;\n  const [cardTtitle, setCardTitle] = useState(\"\");\n\n  const unixToDay = unix_timestamp => {\n    return new Date(unix_timestamp).getDay();\n  };\n\n  const unixToTime = unix_timestamp => {\n    let date = new Date(unix_timestamp * 1000);\n    let hours = date.getHours();\n    return hours;\n  };\n\n  useEffect(() => {\n    if (type == \"daily\") {\n      let date = unixToDay(title);\n      setCardTitle(date);\n    } else if (type == \"hourly\") {\n      let time = unixToTime(title);\n      setCardTitle(time);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: IconSrc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: temp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForcastCard, \"wl/CQTAgvkVjFV/DC9C9yLBRgPM=\");\n\n_c = ForcastCard;\nexport default ForcastCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForcastCard\");","map":{"version":3,"sources":["/home/elgohary/Noran-Task/insta-weather/client/src/components/ForcastCard.js"],"names":["React","useEffect","useState","IconSrc","ForcastCard","props","icon","temp","title","type","cardTtitle","setCardTitle","unixToDay","unix_timestamp","Date","getDay","unixToTime","date","hours","getHours","time"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,kCAApB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,MAA8BJ,KAApC;AACA,QAAM,CAACK,UAAD,EAAaC,YAAb,IAA6BT,QAAQ,CAAC,EAAD,CAA3C;;AAEA,QAAMU,SAAS,GAAIC,cAAD,IAAoB;AACpC,WAAO,IAAIC,IAAJ,CAASD,cAAT,EAAyBE,MAAzB,EAAP;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAIH,cAAD,IAAoB;AACrC,QAAII,IAAI,GAAG,IAAIH,IAAJ,CAASD,cAAc,GAAG,IAA1B,CAAX;AACA,QAAIK,KAAK,GAAGD,IAAI,CAACE,QAAL,EAAZ;AACA,WAAOD,KAAP;AACD,GAJD;;AAKAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,IAAI,IAAI,OAAZ,EAAqB;AACjB,UAAIQ,IAAI,GAAGL,SAAS,CAACJ,KAAD,CAApB;AACAG,MAAAA,YAAY,CAACM,IAAD,CAAZ;AACH,KAHD,MAGO,IAAIR,IAAI,IAAI,QAAZ,EAAsB;AACzB,UAAIW,IAAI,GAAGJ,UAAU,CAACR,KAAD,CAArB;AACAG,MAAAA,YAAY,CAACS,IAAD,CAAZ;AACH;AACF,GARQ,EAQN,EARM,CAAT;AAUA,sBACE;AAAA,4BACE;AAAA,gBAAKZ;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEL;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA,gBAAOI;AAAP;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAhCD;;GAAMH,W;;KAAAA,W;AAiCN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport IconSrc from \"../imgs/weather-icons/cloudy.png\";\n\nconst ForcastCard = (props) => {\n  const { icon, temp, title, type } = props;\n  const [cardTtitle, setCardTitle] = useState(\"\");\n\n  const unixToDay = (unix_timestamp) => {\n    return new Date(unix_timestamp).getDay();\n  };\n\n  const unixToTime = (unix_timestamp) => {\n    let date = new Date(unix_timestamp * 1000);\n    let hours = date.getHours();\n    return hours;\n  };\n  useEffect(() => {\n    if (type == \"daily\") {\n        let date = unixToDay(title);\n        setCardTitle(date);\n    } else if (type == \"hourly\") {\n        let time = unixToTime(title);\n        setCardTitle(time);\n    }\n  }, []);\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      <div>\n        <img src={IconSrc} />\n      </div>\n      <span>{temp}</span>\n    </div>\n  );\n};\nexport default ForcastCard;\n"]},"metadata":{},"sourceType":"module"}