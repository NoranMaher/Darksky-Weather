{"ast":null,"code":"var _jsxFileName = \"/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Container = () => {\n  _s();\n\n  const [geolocationLoaded, setGeolocationLoaded] = useState(false);\n  const [weatherLoaded, setWeatherLoaded] = useState(false);\n  const [userCoordinates, setUserCoordinates] = useState({\n    lat: 0,\n    long: 0\n  });\n  const [currentCity, setCurrentCity] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const [currentTempType, setCurrentTempType] = useState(\"fe\");\n  const [currentForcast, setCurrentForcast] = useState(null);\n  const [hourlyForcast, setHourlyForcast] = useState(null);\n  const [DailyForcast, setDailyForcast] = useState(null);\n  const APP_URL = \"http://localhost:5000/weather/\";\n\n  const unixToDateTime = unix_timestamp => {\n    var a = new Date(unix_timestamp * 1000);\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    var day = days[a.getDay()];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var time = day + \" \" + date + \" \" + month + \" \" + year;\n    return time;\n  };\n\n  const handleTempType = type => {\n    if (currentTempType !== type) {\n      setCurrentTempType(type);\n    }\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const newCoordinates = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        };\n        setUserCoordinates(newCoordinates);\n      }, error => {\n        const newCoordinates = {\n          lat: -1,\n          long: -1\n        };\n        setUserCoordinates(newCoordinates);\n      });\n    } else {\n      const newCoordinates = {\n        lat: -1,\n        long: -1\n      };\n      setUserCoordinates(newCoordinates);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n  useEffect(() => {\n    fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${userCoordinates.lat}&lon=${userCoordinates.long}&zoom=18&addressdetails=1`).then(response => response.json()).then(location => {\n      setCurrentCity(location.display_name);\n      setGeolocationLoaded(true);\n    });\n\n    if (userCoordinates.lat !== 0 && userCoordinates.long !== 0) {\n      fetch(APP_URL + `?lat=${userCoordinates.lat}&long=${userCoordinates.long}&tempType=${currentTempType}`).then(response => response.json()).then(forcast => {\n        let formattedDate = unixToDateTime(forcast.currently.time);\n        setCurrentDate(formattedDate);\n        setCurrentForcast(forcast);\n        setDailyForcast(forcast.daily);\n        setHourlyForcast(forcast.hourly);\n        setWeatherLoaded(true);\n      });\n    }\n  }, [userCoordinates, currentTempType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      className: \"header\",\n      parentCallback: handleTempType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-bg\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"header-bgImg\",\n        src: MainBG\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), weatherLoaded && geolocationLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainBanner, {\n        city: currentCity,\n        date: currentDate,\n        forcast: currentForcast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Forcast, {\n        hourly: hourlyForcast,\n        daily: DailyForcast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Container, \"/FbFDwek6tZ3ZkCS5Ox8Pwf/owo=\");\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js"],"names":["React","useEffect","useState","Header","MainBanner","Forcast","MainBG","Container","geolocationLoaded","setGeolocationLoaded","weatherLoaded","setWeatherLoaded","userCoordinates","setUserCoordinates","lat","long","currentCity","setCurrentCity","currentDate","setCurrentDate","currentTempType","setCurrentTempType","currentForcast","setCurrentForcast","hourlyForcast","setHourlyForcast","DailyForcast","setDailyForcast","APP_URL","unixToDateTime","unix_timestamp","a","Date","months","days","day","getDay","year","getFullYear","month","getMonth","date","getDate","time","handleTempType","type","getLocation","navigator","geolocation","getCurrentPosition","position","newCoordinates","coords","latitude","longitude","error","fetch","then","response","json","location","display_name","forcast","formattedDate","currently","daily","hourly"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CP,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC;AACrDY,IAAAA,GAAG,EAAE,CADgD;AAErDC,IAAAA,IAAI,EAAE;AAF+C,GAAD,CAAtD;AAIA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACkB,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACsB,aAAD,EAAgBC,gBAAhB,IAAoCvB,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACwB,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM0B,OAAO,GAAG,gCAAhB;;AAEA,QAAMC,cAAc,GAAIC,cAAD,IAAoB;AACzC,QAAIC,CAAC,GAAG,IAAIC,IAAJ,CAASF,cAAc,GAAG,IAA1B,CAAR;AACA,QAAIG,MAAM,GAAG,CACX,KADW,EAEX,KAFW,EAGX,KAHW,EAIX,KAJW,EAKX,KALW,EAMX,KANW,EAOX,KAPW,EAQX,KARW,EASX,KATW,EAUX,KAVW,EAWX,KAXW,EAYX,KAZW,CAAb;AAcA,QAAIC,IAAI,GAAG,CACT,QADS,EAET,QAFS,EAGT,SAHS,EAIT,WAJS,EAKT,UALS,EAMT,QANS,EAOT,UAPS,CAAX;AASA,QAAIC,GAAG,GAAGD,IAAI,CAACH,CAAC,CAACK,MAAF,EAAD,CAAd;AACA,QAAIC,IAAI,GAAGN,CAAC,CAACO,WAAF,EAAX;AACA,QAAIC,KAAK,GAAGN,MAAM,CAACF,CAAC,CAACS,QAAF,EAAD,CAAlB;AACA,QAAIC,IAAI,GAAGV,CAAC,CAACW,OAAF,EAAX;AACA,QAAIC,IAAI,GAAGR,GAAG,GAAG,GAAN,GAAYM,IAAZ,GAAmB,GAAnB,GAAyBF,KAAzB,GAAiC,GAAjC,GAAuCF,IAAlD;AACA,WAAOM,IAAP;AACD,GA/BD;;AAgCF,QAAMC,cAAc,GAAIC,IAAD,IAAQ;AAC7B,QAAGzB,eAAe,KAAKyB,IAAvB,EAA4B;AAC1BxB,MAAAA,kBAAkB,CAACwB,IAAD,CAAlB;AACD;AACF,GAJD;;AAME,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,QAAD,IAAc;AACZ,cAAMC,cAAc,GAAG;AACrBrC,UAAAA,GAAG,EAAEoC,QAAQ,CAACE,MAAT,CAAgBC,QADA;AAErBtC,UAAAA,IAAI,EAAEmC,QAAQ,CAACE,MAAT,CAAgBE;AAFD,SAAvB;AAIAzC,QAAAA,kBAAkB,CAACsC,cAAD,CAAlB;AACD,OAPH,EAQGI,KAAD,IAAW;AACT,cAAMJ,cAAc,GAAG;AACrBrC,UAAAA,GAAG,EAAE,CAAC,CADe;AAErBC,UAAAA,IAAI,EAAE,CAAC;AAFc,SAAvB;AAIAF,QAAAA,kBAAkB,CAACsC,cAAD,CAAlB;AACD,OAdH;AAgBD,KAjBD,MAiBO;AACL,YAAMA,cAAc,GAAG;AACrBrC,QAAAA,GAAG,EAAE,CAAC,CADe;AAErBC,QAAAA,IAAI,EAAE,CAAC;AAFc,OAAvB;AAIAF,MAAAA,kBAAkB,CAACsC,cAAD,CAAlB;AACD;AACF,GAzBD;;AA2BAlD,EAAAA,SAAS,CAAC,MAAM;AACd6C,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA7C,EAAAA,SAAS,CAAC,MAAM;AACduD,IAAAA,KAAK,CACF,+DAA8D5C,eAAe,CAACE,GAAI,QAAOF,eAAe,CAACG,IAAK,2BAD5G,CAAL,CAGG0C,IAHH,CAGSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHtB,EAIGF,IAJH,CAISG,QAAD,IAAc;AAElB3C,MAAAA,cAAc,CAAC2C,QAAQ,CAACC,YAAV,CAAd;AACApD,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,KARH;;AAUA,QAAIG,eAAe,CAACE,GAAhB,KAAwB,CAAxB,IAA6BF,eAAe,CAACG,IAAhB,KAAyB,CAA1D,EAA6D;AAC3DyC,MAAAA,KAAK,CACH5B,OAAO,GAAI,QAAOhB,eAAe,CAACE,GAAI,SAAQF,eAAe,CAACG,IAAK,aAAYK,eAAgB,EAD5F,CAAL,CAGGqC,IAHH,CAGSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHtB,EAIGF,IAJH,CAISK,OAAD,IAAa;AACjB,YAAIC,aAAa,GAAGlC,cAAc,CAACiC,OAAO,CAACE,SAAR,CAAkBrB,IAAnB,CAAlC;AACAxB,QAAAA,cAAc,CAAC4C,aAAD,CAAd;AACAxC,QAAAA,iBAAiB,CAACuC,OAAD,CAAjB;AACAnC,QAAAA,eAAe,CAACmC,OAAO,CAACG,KAAT,CAAf;AACAxC,QAAAA,gBAAgB,CAACqC,OAAO,CAACI,MAAT,CAAhB;AACAvD,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,OAXH;AAYD;AACF,GAzBQ,EAyBN,CAACC,eAAD,EAAiBQ,eAAjB,CAzBM,CAAT;AA2BA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,cAAc,EAAEwB;AAA3C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,GAAG,EAAEtC;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,EAKGI,aAAa,IAAIF,iBAAjB,iBACC;AAAA,8BACE,QAAC,UAAD;AACE,QAAA,IAAI,EAAEQ,WADR;AAEE,QAAA,IAAI,EAAEE,WAFR;AAGE,QAAA,OAAO,EAAEI;AAHX;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,OAAD;AAAS,QAAA,MAAM,EAAEE,aAAjB;AAAgC,QAAA,KAAK,EAAEE;AAAvC;AAAA;AAAA;AAAA;AAAA,cANF;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAjID;;GAAMnB,S;;KAAAA,S;AAkIN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\n\nconst Container = () => {\n  const [geolocationLoaded, setGeolocationLoaded] = useState(false);\n  const [weatherLoaded, setWeatherLoaded] = useState(false);\n  const [userCoordinates, setUserCoordinates] = useState({\n    lat: 0,\n    long: 0,\n  });\n  const [currentCity, setCurrentCity] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const [currentTempType, setCurrentTempType] = useState(\"fe\");\n  const [currentForcast, setCurrentForcast] = useState(null);\n  const [hourlyForcast, setHourlyForcast] = useState(null);\n  const [DailyForcast, setDailyForcast] = useState(null);\n  const APP_URL = \"http://localhost:5000/weather/\";\n\n  const unixToDateTime = (unix_timestamp) => {\n    var a = new Date(unix_timestamp * 1000);\n    var months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    var days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    var day = days[a.getDay()];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var time = day + \" \" + date + \" \" + month + \" \" + year;\n    return time;\n  };\nconst handleTempType = (type)=>{\n  if(currentTempType !== type){\n    setCurrentTempType(type)\n  }\n}\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const newCoordinates = {\n            lat: position.coords.latitude,\n            long: position.coords.longitude,\n          };\n          setUserCoordinates(newCoordinates);\n        },\n        (error) => {\n          const newCoordinates = {\n            lat: -1,\n            long: -1,\n          };\n          setUserCoordinates(newCoordinates);\n        }\n      );\n    } else {\n      const newCoordinates = {\n        lat: -1,\n        long: -1,\n      };\n      setUserCoordinates(newCoordinates);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  useEffect(() => {\n    fetch(\n      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${userCoordinates.lat}&lon=${userCoordinates.long}&zoom=18&addressdetails=1`\n    )\n      .then((response) => response.json())\n      .then((location) => {\n   \n        setCurrentCity(location.display_name);\n        setGeolocationLoaded(true);\n      });\n\n    if (userCoordinates.lat !== 0 && userCoordinates.long !== 0) {\n      fetch(\n        APP_URL + `?lat=${userCoordinates.lat}&long=${userCoordinates.long}&tempType=${currentTempType}`\n      )\n        .then((response) => response.json())\n        .then((forcast) => {\n          let formattedDate = unixToDateTime(forcast.currently.time);\n          setCurrentDate(formattedDate);\n          setCurrentForcast(forcast);\n          setDailyForcast(forcast.daily);\n          setHourlyForcast(forcast.hourly);\n          setWeatherLoaded(true);\n        });\n    }\n  }, [userCoordinates,currentTempType]);\n\n  return (\n    <div className=\"container\">\n      <Header className=\"header\" parentCallback={handleTempType}  />\n      <div className=\"header-bg\">\n        <img className=\"header-bgImg\" src={MainBG} />\n      </div>\n      {weatherLoaded && geolocationLoaded && (\n        <>\n          <MainBanner\n            city={currentCity}\n            date={currentDate}\n            forcast={currentForcast}\n          />\n          <Forcast hourly={hourlyForcast} daily={DailyForcast} />\n        </>\n      )}\n    </div>\n  );\n};\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}