{"ast":null,"code":"/**\r\n * Module to use LocationIQ's geocoding and reverse geocoding.\r\n */\nlet LocationIQ;\nexport default LocationIQ = {\n  token: null,\n\n  /**\r\n   * Initialize the module.\r\n   * @param {String} token The LocationIQ token.\r\n   * @see https://locationiq.com/docs\r\n   */\n  init(token) {\n    this.token = token;\n  },\n\n  /**\r\n   * @returns {boolean} True if the module has been initiated. False otherwise.\r\n   */\n  get isInit() {\n    return !!this.token;\n  },\n\n  /**\r\n   * Do <a href=\"https://locationiq.com/docs#reverse-geocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address.\r\n   * Accepted parameters:\r\n   * <ul>\r\n   *     <li>from(Number latitude, Number longitude)</li>\r\n   *     <li>from(Array [latitude, longitude])</li>\r\n   *     <li>from(Object {latitude, longitude})</li>\r\n   *     <li>from(Object {lat, lng})</li>\r\n   * </ul>\r\n   * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\r\n   * @see https://locationiq.com/docs#reverse-geocoding\r\n   */\n  async reverse(...params) {\n    // check api key\n    if (!LocationIQ.isInit) throw {\n      code: LocationIQ.Errors.NOT_INITIATED,\n      message: \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\"\n    }; // --- convert parameters ---\n\n    let queryParams; // (latitude, longitude)\n\n    if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n      lat: `${params[0]}`,\n      lon: `${params[1]}`\n    }; // [latitude, longitude]\n    else if (params[0] instanceof Array) queryParams = {\n        lat: `${params[0][0]}`,\n        lon: `${params[0][1]}`\n      }; // {latitude, longitude}  or {lat, lng}\n      else if (params[0] instanceof Object) queryParams = {\n          lat: `${params[0].lat || params[0].latitude}`,\n          lon: `${params[0].lng || params[0].longitude}`\n        }; // --- start geocoding ---\n    // check query params\n\n    if (!queryParams) // no query params, means parameters where invalid\n      throw {\n        code: LocationIQ.Errors.INVALID_PARAMETERS,\n        message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n      };\n    queryParams = {\n      key: this.token,\n      format: 'json',\n      ...queryParams\n    }; // build url\n\n    const url = `https://us1.locationiq.com/v1/reverse.php?${toQueryParams(queryParams)}`;\n    return await fetchResponse(url);\n  },\n\n  /**\r\n   * Do <a href=\"https://locationiq.com/docs#forward-geocoding\">(search) geocoding</a>, converting human-readable address into geographic coordinates.\r\n   * Accepted parameters:\r\n   * <ul>\r\n   *     <li>from(String address)</li>\r\n   * </ul>\r\n   * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\r\n   * @see https://locationiq.com/docs#forward-geocoding\r\n   */\n  async search(...params) {\n    // check api key\n    if (!LocationIQ.isInit) throw {\n      code: LocationIQ.Errors.NOT_INITIATED,\n      message: \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\"\n    }; // --- convert parameters ---\n\n    let queryParams; // address\n\n    if (typeof params[0] === 'string') queryParams = {\n      q: params[0]\n    }; // --- start geocoding ---\n    // check query params\n\n    if (!queryParams) // no query params, means parameters where invalid\n      throw {\n        code: LocationIQ.Errors.INVALID_PARAMETERS,\n        message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n      };\n    queryParams = {\n      key: this.token,\n      format: 'json',\n      ...queryParams\n    }; // build url\n\n    const url = `https://us1.locationiq.com/v1/search.php?${toQueryParams(queryParams)}`;\n    return await fetchResponse(url);\n  },\n\n  /**\r\n   * Do <a href=\"https://locationiq.com/docs#nearby-points-of-interest-poi-private-beta\">(nearby) Points of Interest nearby</a>, get geographic coordinates nearby points of interest.\r\n   * Accepted parameters:\r\n   * <ul>\r\n   *     <li>from(Number latitude, Number longitude, String tag, Nuber radius)</li>\r\n   *     <li>from(Array [latitude, longitude, tag, radius])</li>\r\n   *     <li>from(Object {latitude, longitude, tag, radius})</li>\r\n   *     <li>from(Object {lat, lng, tag, radius})</li>\r\n   * </ul>\r\n   * @returns {Promise.<Object>} Object containing informations about POI nearby the coordinates.\r\n   * @see https://locationiq.com/docs#nearby-points-of-interest-poi-private-beta\r\n   */\n  async nearby(...params) {\n    // check api key\n    if (!LocationIQ.isInit) throw {\n      code: LocationIQ.Errors.NOT_INITIATED,\n      message: \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\"\n    }; // --- convert parameters ---\n\n    let queryParams; // (latitude, longitude)\n\n    if (!isNaN(params[0]) && !isNaN(params[1]) && typeof params[2] === 'string' && !isNaN(params[3])) queryParams = {\n      lat: `${params[0]}`,\n      lon: `${params[1]}`,\n      tag: `${params[2]}`,\n      radius: `${params[3]}`\n    }; // [latitude, longitude]\n    else if (params[0] instanceof Array) queryParams = {\n        lat: `${params[0][0]}`,\n        lon: `${params[0][1]}`,\n        tag: `${params[0][2]}`,\n        radius: `${params[0][3]}`\n      }; // {latitude, longitude}  or {lat, lng}\n      else if (params[0] instanceof Object) queryParams = {\n          lat: `${params[0].lat || params[0].latitude}`,\n          lon: `${params[0].lng || params[0].longitude}`,\n          tag: `${params[0].tag}`,\n          radius: `${params[0].radius}`\n        }; // --- start geocoding ---\n    // check query params\n\n    if (!queryParams) // no query params, means parameters where invalid\n      throw {\n        code: LocationIQ.Errors.INVALID_PARAMETERS,\n        message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n      };\n    queryParams = {\n      key: this.token,\n      format: 'json',\n      ...queryParams\n    }; // build url\n\n    const url = `https://us1.locationiq.com/v1/nearby.php?${toQueryParams(queryParams)}`;\n    return await fetchResponse(url);\n  },\n\n  /**\r\n   * All possible errors.\r\n   */\n  Errors: {\n    /**\r\n     * Module hasn't been initiated. Call {@link LocationIQ.init}.\r\n     */\n    NOT_INITIATED: 0,\n\n    /**\r\n     * Parameters are invalid.\r\n     */\n    INVALID_PARAMETERS: 1,\n\n    /**\r\n     * Error wile fetching to server.\r\n     * The error.origin property contains the original fetch error.\r\n     */\n    FETCHING: 2,\n\n    /**\r\n     * Error while parsing server response.\r\n     * The error.origin property contains the response.\r\n     */\n    PARSING: 3,\n\n    /**\r\n     * Error from the server.\r\n     * The error.origin property contains the response's body.\r\n     */\n    SERVER: 4\n  }\n};\n/**\r\n * Convert an object into query parameters.\r\n * @param {Object} object Object to convert.\r\n * @returns {string} Encoded query parameters.\r\n */\n\nfunction toQueryParams(object) {\n  return Object.keys(object).filter(key => !!object[key]).map(key => key + \"=\" + encodeURIComponent(object[key])).join(\"&\");\n}\n/**\r\n * Convert an object into query parameters.\r\n * @param {string} url Object to convert.\r\n * @returns {string} Encoded query parameters.\r\n */\n\n\nasync function fetchResponse(url) {\n  let response, data; // fetch\n\n  try {\n    response = await fetch(url);\n  } catch (error) {\n    throw {\n      code: LocationIQ.Errors.FETCHING,\n      message: \"Error while fetching. Check your network.\",\n      origin: error\n    };\n  } // parse\n\n\n  try {\n    data = await response.json();\n  } catch (error) {\n    throw {\n      code: LocationIQ.Errors.PARSING,\n      message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n      origin: response\n    };\n  } // check response's data\n\n\n  if (data.place_id === undefined && data[0] === undefined && data.osm_id === undefined) throw {\n    code: LocationIQ.Errors.SERVER,\n    message: \"Expected data was not found. The received datas are in the error's 'origin' field. Check it for more informations.\",\n    origin: data\n  };\n  return data;\n}","map":{"version":3,"sources":["/home/elgohary/Noran-Task/insta-weather/client/node_modules/react-native-locationiq/LocationIQ.js"],"names":["LocationIQ","token","init","isInit","reverse","params","code","Errors","NOT_INITIATED","message","queryParams","isNaN","lat","lon","Array","Object","latitude","lng","longitude","INVALID_PARAMETERS","JSON","stringify","key","format","url","toQueryParams","fetchResponse","search","q","nearby","tag","radius","FETCHING","PARSING","SERVER","object","keys","filter","map","encodeURIComponent","join","response","data","fetch","error","origin","json","place_id","undefined","osm_id"],"mappings":"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","sourcesContent":["/**\r\n * Module to use LocationIQ's geocoding and reverse geocoding.\r\n */\r\nlet LocationIQ;\r\nexport default LocationIQ = {\r\n\ttoken : null,\r\n\t\r\n\t/**\r\n\t * Initialize the module.\r\n\t * @param {String} token The LocationIQ token.\r\n\t * @see https://locationiq.com/docs\r\n\t */\r\n\tinit(token) {\r\n\t\tthis.token = token;\r\n\t},\r\n\r\n\t/**\r\n\t * @returns {boolean} True if the module has been initiated. False otherwise.\r\n\t */\r\n\tget isInit() {\r\n\t\treturn !!this.token;\r\n\t},\r\n\r\n\t/**\r\n\t * Do <a href=\"https://locationiq.com/docs#reverse-geocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address.\r\n\t * Accepted parameters:\r\n\t * <ul>\r\n\t *     <li>from(Number latitude, Number longitude)</li>\r\n\t *     <li>from(Array [latitude, longitude])</li>\r\n\t *     <li>from(Object {latitude, longitude})</li>\r\n\t *     <li>from(Object {lat, lng})</li>\r\n\t * </ul>\r\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\r\n\t * @see https://locationiq.com/docs#reverse-geocoding\r\n\t */\r\n\tasync reverse(...params) {\r\n\t\t// check api key\r\n\t\tif (!LocationIQ.isInit)\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.NOT_INITIATED,\r\n\t\t\t\tmessage : \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\",\r\n\t\t\t};\r\n\r\n\t\t// --- convert parameters ---\r\n\t\tlet queryParams;\r\n\r\n\t\t// (latitude, longitude)\r\n\t\tif (!isNaN(params[0]) && !isNaN(params[1]))\r\n\t\t\tqueryParams = {lat : `${params[0]}`, lon : `${params[1]}`};\r\n\r\n\t\t// [latitude, longitude]\r\n\t\telse if (params[0] instanceof Array)\r\n\t\t\tqueryParams = {lat : `${params[0][0]}`, lon : `${params[0][1]}`};\r\n\r\n\t\t// {latitude, longitude}  or {lat, lng}\r\n\t\telse if (params[0] instanceof Object)\r\n\t\t\tqueryParams = {lat : `${params[0].lat || params[0].latitude}`, lon : `${params[0].lng || params[0].longitude}`};\r\n\r\n\t\t// --- start geocoding ---\r\n\r\n\t\t// check query params\r\n\t\tif (!queryParams)\r\n\t\t// no query params, means parameters where invalid\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.INVALID_PARAMETERS,\r\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\r\n\t\t\t};\r\n\r\n\t\tqueryParams = { key: this.token, format: 'json', ...queryParams }\r\n\t\t// build url\r\n\t\tconst url = `https://us1.locationiq.com/v1/reverse.php?${toQueryParams(queryParams)}`;\r\n\r\n\t\treturn await fetchResponse(url);\r\n\t},\r\n\r\n\t/**\r\n\t * Do <a href=\"https://locationiq.com/docs#forward-geocoding\">(search) geocoding</a>, converting human-readable address into geographic coordinates.\r\n\t * Accepted parameters:\r\n\t * <ul>\r\n\t *     <li>from(String address)</li>\r\n\t * </ul>\r\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\r\n\t * @see https://locationiq.com/docs#forward-geocoding\r\n\t */\r\n\tasync search(...params) {\r\n\t\t// check api key\r\n\t\tif (!LocationIQ.isInit)\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.NOT_INITIATED,\r\n\t\t\t\tmessage : \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\",\r\n\t\t\t};\r\n\r\n\t\t// --- convert parameters ---\r\n\t\tlet queryParams;\r\n\r\n\t\t// address\r\n\t\tif (typeof params[0] === 'string')\r\n\t\t\tqueryParams = {q : params[0]};\r\n\r\n\t\t// --- start geocoding ---\r\n\r\n\t\t// check query params\r\n\t\tif (!queryParams)\r\n\t\t// no query params, means parameters where invalid\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.INVALID_PARAMETERS,\r\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\r\n\t\t\t};\r\n\r\n\t\tqueryParams = { key: this.token, format: 'json', ...queryParams }\r\n\t\t// build url\r\n\t\tconst url = `https://us1.locationiq.com/v1/search.php?${toQueryParams(queryParams)}`;\r\n\r\n\t\treturn await fetchResponse(url);\r\n\t},\r\n\r\n\t/**\r\n\t * Do <a href=\"https://locationiq.com/docs#nearby-points-of-interest-poi-private-beta\">(nearby) Points of Interest nearby</a>, get geographic coordinates nearby points of interest.\r\n\t * Accepted parameters:\r\n\t * <ul>\r\n\t *     <li>from(Number latitude, Number longitude, String tag, Nuber radius)</li>\r\n\t *     <li>from(Array [latitude, longitude, tag, radius])</li>\r\n\t *     <li>from(Object {latitude, longitude, tag, radius})</li>\r\n\t *     <li>from(Object {lat, lng, tag, radius})</li>\r\n\t * </ul>\r\n\t * @returns {Promise.<Object>} Object containing informations about POI nearby the coordinates.\r\n\t * @see https://locationiq.com/docs#nearby-points-of-interest-poi-private-beta\r\n\t */\r\n\tasync nearby(...params) {\r\n\t\t// check api key\r\n\t\tif (!LocationIQ.isInit)\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.NOT_INITIATED,\r\n\t\t\t\tmessage : \"LocationIQ isn't initialized. Call LocationIQ.init function, passing it your token as parameter.\",\r\n\t\t\t};\r\n\r\n\t\t// --- convert parameters ---\r\n\t\tlet queryParams;\r\n\r\n\t\t// (latitude, longitude)\r\n\t\tif (!isNaN(params[0]) && !isNaN(params[1]) && typeof params[2] === 'string' && !isNaN(params[3]))\r\n\t\t\tqueryParams = {lat : `${params[0]}`, lon : `${params[1]}`, tag : `${params[2]}`, radius : `${params[3]}`};\r\n\r\n\t\t// [latitude, longitude]\r\n\t\telse if (params[0] instanceof Array)\r\n\t\t\tqueryParams = {lat : `${params[0][0]}`, lon : `${params[0][1]}`, tag : `${params[0][2]}`, radius : `${params[0][3]}`};\r\n\r\n\t\t// {latitude, longitude}  or {lat, lng}\r\n\t\telse if (params[0] instanceof Object)\r\n\t\t\tqueryParams = {lat : `${params[0].lat || params[0].latitude}`, lon : `${params[0].lng || params[0].longitude}`, tag : `${params[0].tag}`, radius : `${params[0].radius}`};\r\n\r\n\t\t// --- start geocoding ---\r\n\r\n\t\t// check query params\r\n\t\tif (!queryParams)\r\n\t\t// no query params, means parameters where invalid\r\n\t\t\tthrow {\r\n\t\t\t\tcode : LocationIQ.Errors.INVALID_PARAMETERS,\r\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\r\n\t\t\t};\r\n\r\n\t\tqueryParams = { key: this.token, format: 'json', ...queryParams }\r\n\t\t// build url\r\n\t\tconst url = `https://us1.locationiq.com/v1/nearby.php?${toQueryParams(queryParams)}`;\r\n\t\t\r\n\t\treturn await fetchResponse(url);\r\n\t},\r\n\r\n\t/**\r\n\t * All possible errors.\r\n\t */\r\n\tErrors : {\r\n\t\t/**\r\n\t\t * Module hasn't been initiated. Call {@link LocationIQ.init}.\r\n\t\t */\r\n\t\tNOT_INITIATED : 0,\r\n\r\n\t\t/**\r\n\t\t * Parameters are invalid.\r\n\t\t */\r\n\t\tINVALID_PARAMETERS : 1,\r\n\r\n\t\t/**\r\n\t\t * Error wile fetching to server.\r\n\t\t * The error.origin property contains the original fetch error.\r\n\t\t */\r\n\t\tFETCHING : 2,\r\n\r\n\t\t/**\r\n\t\t * Error while parsing server response.\r\n\t\t * The error.origin property contains the response.\r\n\t\t */\r\n\t\tPARSING : 3,\r\n\r\n\t\t/**\r\n\t\t * Error from the server.\r\n\t\t * The error.origin property contains the response's body.\r\n\t\t */\r\n\t\tSERVER : 4,\r\n\t},\r\n}\r\n\r\n/**\r\n * Convert an object into query parameters.\r\n * @param {Object} object Object to convert.\r\n * @returns {string} Encoded query parameters.\r\n */\r\nfunction toQueryParams(object) {\r\n\treturn Object.keys(object)\r\n\t\t.filter(key => !!object[key])\r\n\t\t.map(key => key + \"=\" + encodeURIComponent(object[key]))\r\n\t\t.join(\"&\")\r\n}\r\n\r\n/**\r\n * Convert an object into query parameters.\r\n * @param {string} url Object to convert.\r\n * @returns {string} Encoded query parameters.\r\n */\r\nasync function fetchResponse(url) {\r\n\tlet response, data;\r\n\r\n\t// fetch\r\n\ttry {\r\n\t\tresponse = await fetch(url);\r\n\t} catch(error) {\r\n\t\tthrow {\r\n\t\t\tcode : LocationIQ.Errors.FETCHING,\r\n\t\t\tmessage : \"Error while fetching. Check your network.\",\r\n\t\t\torigin : error,\r\n\t\t};\r\n\t}\r\n\r\n\t// parse\r\n\ttry {\r\n\t\tdata = await response.json();\r\n\t} catch(error) {\r\n\t\tthrow {\r\n\t\t\tcode : LocationIQ.Errors.PARSING,\r\n\t\t\tmessage : \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\r\n\t\t\torigin : response,\r\n\t\t};\r\n\t}\r\n\r\n\t// check response's data\r\n\tif (data.place_id === undefined && data[0] === undefined && data.osm_id === undefined)\r\n\t\tthrow {\r\n\t\t\tcode : LocationIQ.Errors.SERVER,\r\n\t\t\tmessage : \"Expected data was not found. The received datas are in the error's 'origin' field. Check it for more informations.\",\r\n\t\t\torigin : data,\r\n\t\t};\r\n\r\n\treturn data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}