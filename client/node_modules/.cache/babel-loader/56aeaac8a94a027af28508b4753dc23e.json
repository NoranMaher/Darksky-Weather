{"ast":null,"code":"var _jsxFileName = \"/home/elgohary/Noran-Task/insta-weather/src/components/Container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\nimport api from \"api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Container = () => {\n  _s();\n\n  const [news, setNews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [userCoordinates, setUserCoordinates] = useState({\n    lat: null,\n    long: null\n  });\n\n  let fetch = require('node-fetch'); //let uri = 'http://jsonplaceholder.typicode.com/users';\n\n\n  let darksky = 'https://api.darksky.net/forecast/';\n  let key = 'bc02564c54e3ec592f5c5c04e01f7b6a';\n  let lat = 45.3483;\n  let lng = -75.7584;\n  let uri = darksky + key + '/' + lat + ',' + lng;\n  console.log(uri);\n  uri = uri.concat('?units=ca&exclude=minutely,hourly&lang=ru'); // units - ca, si, us, uk\n  // exclude - minutely,hourly,daily,currently\n  // lang - \n\n  let options = {\n    method: 'GET',\n    mode: 'cors'\n  };\n  let req = new fetch.Request(uri, options);\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      setUserCoordinates(prevState => ({ ...prevState,\n        lat: \"30.005493\",\n        long: \"31.477898\"\n      }));\n    }\n  }\n\n  function showPosition(position) {\n    setUserCoordinates(prevState => ({ ...prevState,\n      lat: position.coords.latitude,\n      long: position.coords.longitude\n    }));\n  }\n\n  useEffect(() => {\n    fetch(req).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Bad HTTP!');\n      }\n    }).then(j => {\n      console.log(j.currently.temperature, j.currently.summary);\n      console.log(j.daily.data[1]); //console.log('JSON data provided');\n    }).catch(err => {\n      console.log('ERROR:', err.message);\n    });\n  }, []); // useEffect(() => {\n  //     getLocation();\n  //     getForcast();\n  //   }, []);\n  //   const getForcast = async () => {\n  //     setLoading(true);\n  //     api.getData(userCoordinates.lat,userCoordinates.long).then((res) => {\n  //       if (res.status == 200) {\n  //         setNews(res.data);\n  //       } else {\n  //         setNews([]);\n  //       }\n  //       setLoading(false);\n  //     });\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      className: \"header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-bg\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"header-bgImg\",\n        src: MainBG\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MainBanner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Forcast, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Container, \"187OJk5iPCN5czASv+dLM/FFXiM=\");\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/home/elgohary/Noran-Task/insta-weather/src/components/Container.js"],"names":["React","useEffect","useState","Header","MainBanner","Forcast","MainBG","api","Container","news","setNews","loading","setLoading","userCoordinates","setUserCoordinates","lat","long","fetch","require","darksky","key","lng","uri","console","log","concat","options","method","mode","req","Request","getLocation","navigator","geolocation","getCurrentPosition","showPosition","prevState","position","coords","latitude","longitude","then","response","ok","json","Error","j","currently","temperature","summary","daily","data","catch","err","message"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\nimport api from \"api\";\n\nconst Container = () => {\n   \n    const [news, setNews] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [userCoordinates , setUserCoordinates] = useState({lat:null,long:null});\n    let fetch = require('node-fetch');\n\n//let uri = 'http://jsonplaceholder.typicode.com/users';\nlet darksky = 'https://api.darksky.net/forecast/';\nlet key = 'bc02564c54e3ec592f5c5c04e01f7b6a';\nlet lat = 45.3483;\nlet lng = -75.7584;\nlet uri = darksky + key + '/' + lat +','+ lng;\nconsole.log(uri);\nuri = uri.concat('?units=ca&exclude=minutely,hourly&lang=ru');\n// units - ca, si, us, uk\n// exclude - minutely,hourly,daily,currently\n// lang - \nlet options = {\n    method: 'GET',\n    mode: 'cors'\n}\nlet req = new fetch.Request(uri, options);\n\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n    setUserCoordinates(prevState => ({\n        ...prevState,\n        lat: \"30.005493\",\n        long: \"31.477898\"\n     }))\n      }\n}\n\nfunction showPosition(position) {\n    setUserCoordinates(prevState => ({\n        ...prevState,\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n     }))\n         \n}\n\nuseEffect(()=>{\n\nfetch(req)\n    .then((response)=>{\n        if(response.ok){\n            return response.json();\n        }else{\n            throw new Error('Bad HTTP!')\n        }\n    })\n    .then( (j) =>{\n        console.log(j.currently.temperature, j.currently.summary);\n        \n        console.log( j.daily.data[1] );\n        //console.log('JSON data provided');\n    })\n    .catch( (err) =>{\n        console.log('ERROR:', err.message);\n    });\n},[])\n\n    // useEffect(() => {\n    //     getLocation();\n    //     getForcast();\n    //   }, []);\n\n    //   const getForcast = async () => {\n    //     setLoading(true);\n    //     api.getData(userCoordinates.lat,userCoordinates.long).then((res) => {\n    //       if (res.status == 200) {\n    //         setNews(res.data);\n    //       } else {\n    //         setNews([]);\n    //       }\n    //       setLoading(false);\n    //     });\n    //   };\n    \n    return (\n        <div className=\"container\">\n            <Header className=\"header\"/>\n            <div className=\"header-bg\">\n                <img className=\"header-bgImg\" src={MainBG} />\n            </div>\n            <MainBanner />\n            <Forcast />\n        </div>\n    );\n};\nexport default Container;"]},"metadata":{},"sourceType":"module"}