{"ast":null,"code":"var _jsxFileName = \"/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Container = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [userCoordinates, setUserCoordinates] = useState({\n    lat: null,\n    long: null\n  });\n  const [userCity, setUserCity] = useState(\"\");\n  const APP_URL = \"http://localhost:5000/weather/\";\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const newCoordinates = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        };\n        setUserCoordinates(newCoordinates);\n      }, error => {\n        const newCoordinates = {\n          lat: -1,\n          long: -1\n        };\n        setUserCoordinates(newCoordinates);\n      });\n    } else {\n      const newCoordinates = {\n        lat: -1,\n        long: -1\n      };\n      setUserCoordinates(newCoordinates);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n  useEffect(() => {\n    fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${userCoordinates.lat}&lon=${userCoordinates.long}&zoom=18&addressdetails=1`).then(response => response.json()).then(location => {\n      setUserCity(location.display_name);\n    });\n  }, [userCoordinates]);\n  useEffect(() => {\n    fetch(APP_URL + `?lat=${userCoordinates.lat}&long=${userCoordinates.long}`).then(response => response.json()).then(forcast => {\n      console.log(forcast);\n    });\n    setLoading(true);\n  }, [userCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      className: \"header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-bg\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"header-bgImg\",\n        src: MainBG\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainBanner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Forcast, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Container, \"PLk5eqTOhOerkjkR9gDAKFLcpos=\");\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js"],"names":["React","useEffect","useState","Header","MainBanner","Forcast","MainBG","Container","loading","setLoading","userCoordinates","setUserCoordinates","lat","long","userCity","setUserCity","APP_URL","getLocation","navigator","geolocation","getCurrentPosition","position","newCoordinates","coords","latitude","longitude","error","fetch","then","response","json","location","display_name","forcast","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\n\nconst Container = () => {\n  const [loading, setLoading] = useState(false);\n  const [userCoordinates, setUserCoordinates] = useState({\n    lat: null,\n    long: null,\n  });\n  const [userCity, setUserCity] = useState(\"\");\n  const APP_URL = \"http://localhost:5000/weather/\";\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const newCoordinates = {\n            lat: position.coords.latitude,\n            long: position.coords.longitude,\n          };\n          setUserCoordinates(newCoordinates);\n        },\n        (error) => {\n          const newCoordinates = {\n            lat: -1,\n            long: -1,\n          };\n          setUserCoordinates(newCoordinates);\n        }\n      );\n    } else {\n      const newCoordinates = {\n        lat: -1,\n        long: -1,\n      };\n      setUserCoordinates(newCoordinates);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  useEffect(() => {\n    fetch(\n      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${userCoordinates.lat}&lon=${userCoordinates.long}&zoom=18&addressdetails=1`\n    )\n      .then((response) => response.json())\n      .then((location) => {\n        setUserCity(location.display_name)\n      });\n  }, [userCoordinates]);\n\n  useEffect(() => {\n    fetch(APP_URL + `?lat=${userCoordinates.lat}&long=${userCoordinates.long}`)\n      .then((response) => response.json())\n      .then((forcast) => {\n        console.log(forcast);\n      });\n      setLoading(true);\n  }, [userCoordinates]);\n\n  return (\n    <div className=\"container\">\n      <Header className=\"header\" />\n      <div className=\"header-bg\">\n        <img className=\"header-bgImg\" src={MainBG} />\n      </div>\n      <MainBanner />\n      <Forcast />\n    </div>\n  );\n};\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}