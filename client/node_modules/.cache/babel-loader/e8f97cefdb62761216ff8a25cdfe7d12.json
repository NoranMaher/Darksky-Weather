{"ast":null,"code":"var _jsxFileName = \"/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Container = () => {\n  _s();\n\n  const [geolocationLoaded, setGeolocationLoaded] = useState(false);\n  const [weatherLoaded, setWeatherLoaded] = useState(false);\n  const [userCoordinates, setUserCoordinates] = useState({\n    lat: 0,\n    long: 0\n  });\n  const [currentCity, setCurrentCity] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const [currentTempType, setCurrentTempType] = useState('f');\n  const [currentForcast, setCurrentForcast] = useState(null);\n  const [hourlyForcast, setHourlyForcast] = useState(null);\n  const [DailyForcast, setDailyForcast] = useState(null);\n  const APP_URL = \"http://localhost:5000/weather/\";\n\n  const unixToDateTime = unix_timestamp => {\n    var options = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    const dateVal = new Date(unix_timestamp).toLocaleDateString('en-US', options);\n    console.log(dateVal);\n    return dateVal;\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const newCoordinates = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        };\n        setUserCoordinates(newCoordinates);\n      }, error => {\n        const newCoordinates = {\n          lat: -1,\n          long: -1\n        };\n        setUserCoordinates(newCoordinates);\n      });\n    } else {\n      const newCoordinates = {\n        lat: -1,\n        long: -1\n      };\n      setUserCoordinates(newCoordinates);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n  useEffect(() => {\n    fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${userCoordinates.lat}&lon=${userCoordinates.long}&zoom=18&addressdetails=1`).then(response => response.json()).then(location => {\n      console.log(location.display_name);\n      setCurrentCity(location.display_name);\n      setGeolocationLoaded(true);\n    });\n\n    if (userCoordinates.lat !== 0 && userCoordinates.long !== 0) {\n      fetch(APP_URL + `?lat=${userCoordinates.lat}&long=${userCoordinates.long}`).then(response => response.json()).then(forcast => {\n        let formattedDate = unixToDateTime(forcast.currently.time);\n        setCurrentDate(formattedDate);\n        setCurrentForcast(forcast);\n        setDailyForcast(forcast.daily);\n        setHourlyForcast(forcast.hourly);\n        setWeatherLoaded(true);\n      });\n    }\n  }, [userCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      className: \"header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-bg\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"header-bgImg\",\n        src: MainBG\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), weatherLoaded && geolocationLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainBanner, {\n        city: currentCity,\n        date: currentDate,\n        forcast: currentForcast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Forcast, {\n        hourly: hourlyForcast,\n        daily: DailyForcast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Container, \"kfrXIaV9liG4fgr/yYv9OmjBjn0=\");\n\n_c = Container;\nexport default Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js"],"names":["React","useEffect","useState","Header","MainBanner","Forcast","MainBG","Container","geolocationLoaded","setGeolocationLoaded","weatherLoaded","setWeatherLoaded","userCoordinates","setUserCoordinates","lat","long","currentCity","setCurrentCity","currentDate","setCurrentDate","currentTempType","setCurrentTempType","currentForcast","setCurrentForcast","hourlyForcast","setHourlyForcast","DailyForcast","setDailyForcast","APP_URL","unixToDateTime","unix_timestamp","options","weekday","year","month","day","dateVal","Date","toLocaleDateString","console","log","getLocation","navigator","geolocation","getCurrentPosition","position","newCoordinates","coords","latitude","longitude","error","fetch","then","response","json","location","display_name","forcast","formattedDate","currently","time","daily","hourly"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"components/Header\";\nimport MainBanner from \"components/MainBanner\";\nimport Forcast from \"components/Forcast\";\nimport MainBG from \"../imgs/Background.png\";\n\nconst Container = () => {\n  const [geolocationLoaded, setGeolocationLoaded] = useState(false);\n  const [weatherLoaded, setWeatherLoaded] = useState(false);\n  const [userCoordinates, setUserCoordinates] = useState({\n    lat: 0,\n    long: 0,\n  });\n  const [currentCity, setCurrentCity] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const [currentTempType,setCurrentTempType]=useState('f');\n  const [currentForcast , setCurrentForcast] = useState(null);\n  const [hourlyForcast,setHourlyForcast] = useState(null);\n  const [DailyForcast, setDailyForcast] = useState(null);\n  const APP_URL = \"http://localhost:5000/weather/\";\n\n  const unixToDateTime = (unix_timestamp) => {\n    var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    const dateVal = new Date(unix_timestamp).toLocaleDateString('en-US',options);\n    console.log(dateVal)\n    return dateVal;\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const newCoordinates = {\n            lat: position.coords.latitude,\n            long: position.coords.longitude,\n          };\n          setUserCoordinates(newCoordinates);\n        },\n        (error) => {\n          const newCoordinates = {\n            lat: -1,\n            long: -1,\n          };\n          setUserCoordinates(newCoordinates);\n        }\n      );\n    } else {\n      const newCoordinates = {\n        lat: -1,\n        long: -1,\n      };\n      setUserCoordinates(newCoordinates);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  useEffect(() => {\n    fetch(\n      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${userCoordinates.lat}&lon=${userCoordinates.long}&zoom=18&addressdetails=1`\n    )\n      .then((response) => response.json())\n      .then((location) => {\n        console.log(location.display_name);\n        setCurrentCity(location.display_name);\n       setGeolocationLoaded(true);\n      });\n\n      if (userCoordinates.lat !== 0 && userCoordinates.long !== 0) {\n        fetch(\n          APP_URL + `?lat=${userCoordinates.lat}&long=${userCoordinates.long}`\n        )\n          .then((response) => response.json())\n          .then((forcast) => {\n            let formattedDate = unixToDateTime(forcast.currently.time);\n            setCurrentDate(formattedDate);\n            setCurrentForcast(forcast);\n            setDailyForcast(forcast.daily);\n            setHourlyForcast(forcast.hourly)\n            setWeatherLoaded(true);\n          });\n         \n      }\n\n  }, [userCoordinates]);\n\n\n\n  return (\n    <div className=\"container\">\n      <Header className=\"header\" />\n      <div className=\"header-bg\">\n        <img className=\"header-bgImg\" src={MainBG} />\n      </div>\n      {(weatherLoaded && geolocationLoaded) && (\n        <>\n          <MainBanner city={currentCity} date={currentDate} forcast={currentForcast}/>\n          <Forcast hourly={hourlyForcast} daily={DailyForcast}/>\n        </>\n      )}\n    </div>\n  );\n};\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}