{"ast":null,"code":"var _jsxFileName = \"/home/elgohary/Noran-Task/insta-weather/client/src/components/ForcastCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForcastCard = props => {\n  _s();\n\n  const images = require.context('../../public/weather-icons', true);\n\n  const {\n    icon,\n    temp,\n    title,\n    type\n  } = props;\n  console.log(type);\n  const [cardTitle, setCardTitle] = useState(title);\n\n  const unixToDay = unix_timestamp => {\n    let i = 0;\n    let data = {\n      list: [{\n        timeStamp: unix_timestamp\n      }]\n    };\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    let dayNum = new Date(data.list[i].timeStamp * 1000).getDay();\n    let dayName = days[dayNum];\n    return dayName;\n  };\n\n  const unixToTime = unix_timestamp => {\n    let date = new Date(unix_timestamp * 1000);\n    let hours = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\n    let formattedHour = hours + \":00\";\n    return formattedHour;\n  };\n\n  useEffect(() => {\n    if (type == \"daily\") {\n      if (title !== \"Today\") {\n        let date = unixToDay(title);\n        setCardTitle(date);\n      }\n    }\n\n    if (type == \"hourly\") {\n      if (title !== \"Now\") {\n        let time = unixToTime(title);\n        setCardTitle(time);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panal-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: cardTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panal-item-img\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/weather-icons/${icon}.svg`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), type == \"hourly\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [Math.round(temp), \"\\xB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [Math.round(temp[0]), \"\\xB0 / \", Math.round(temp[1]), \"\\xB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForcastCard, \"hJNWZ2ruz+L5lWwzzaWm8uNEzgk=\");\n\n_c = ForcastCard;\nexport default ForcastCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForcastCard\");","map":{"version":3,"sources":["/home/elgohary/Noran-Task/insta-weather/client/src/components/ForcastCard.js"],"names":["React","useEffect","useState","ForcastCard","props","images","require","context","icon","temp","title","type","console","log","cardTitle","setCardTitle","unixToDay","unix_timestamp","i","data","list","timeStamp","days","dayNum","Date","getDay","dayName","unixToTime","date","hours","getHours","formattedHour","time","process","env","PUBLIC_URL","Math","round"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n\nconst ForcastCard = (props) => {\n    const images = require.context('../../public/weather-icons', true);\n\n  const { icon, temp, title, type } = props;\n  console.log(type);\n  const [cardTitle, setCardTitle] = useState(title);\n  \n  const unixToDay = (unix_timestamp) => {\n    let i = 0;\n    let data = { list: [ { timeStamp: unix_timestamp } ] };\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; \n    let dayNum = new Date(data.list[i].timeStamp * 1000).getDay();\n    let dayName = days[dayNum];\n    return dayName;\n };\n\n const unixToTime = (unix_timestamp) => {\n    let date = new Date(unix_timestamp * 1000);\n    let hours = (date.getHours()) < 10 ? \"0\" + date.getHours() : date.getHours() ;\n    let formattedHour = hours+\":00\";\n    return formattedHour;\n  };\n  useEffect(() => {\n    if (type == \"daily\") {\n      if(title !== \"Today\"){\n        let date = unixToDay(title);\n        setCardTitle(date);\n      }\n    }  if (type == \"hourly\") {\n      if(title !== \"Now\"){\n        let time = unixToTime(title);\n        setCardTitle(time);\n      }\n    }\n  }, []);\n\n  return (\n    <div className=\"panal-item\">\n      <h3>{cardTitle}</h3>\n      <div className=\"panal-item-img\">\n\n        <img src={`${process.env.PUBLIC_URL}/weather-icons/${icon}.svg`}  />\n      </div>\n      {type==\"hourly\" ?\n      <span>{Math.round(temp)}°</span>\n      :\n      <span>{Math.round(temp[0])}° / {Math.round(temp[1])}°</span>\n  }\n    </div>\n  );\n};\nexport default ForcastCard;\n"]},"metadata":{},"sourceType":"module"}