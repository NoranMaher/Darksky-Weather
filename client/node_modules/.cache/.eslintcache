[{"/home/elgohary/Noran-Task/insta-weather/client/src/index.js":"1","/home/elgohary/Noran-Task/insta-weather/client/src/App.js":"2","/home/elgohary/Noran-Task/insta-weather/client/src/reportWebVitals.js":"3","/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js":"4","/home/elgohary/Noran-Task/insta-weather/client/src/components/Header.js":"5","/home/elgohary/Noran-Task/insta-weather/client/src/components/MainBanner.js":"6","/home/elgohary/Noran-Task/insta-weather/client/src/components/Forcast.js":"7","/home/elgohary/Noran-Task/insta-weather/client/src/components/DailyForcast.js":"8","/home/elgohary/Noran-Task/insta-weather/client/src/components/HourlyForcast.js":"9","/home/elgohary/Noran-Task/insta-weather/client/src/components/ForcastCard.js":"10"},{"size":509,"mtime":1614273436754,"results":"11","hashOfConfig":"12"},{"size":184,"mtime":1614272984908,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1614257199830,"results":"14","hashOfConfig":"12"},{"size":4102,"mtime":1614513942267,"results":"15","hashOfConfig":"12"},{"size":786,"mtime":1614456449489,"results":"16","hashOfConfig":"12"},{"size":1097,"mtime":1614459779343,"results":"17","hashOfConfig":"12"},{"size":1145,"mtime":1614462224793,"results":"18","hashOfConfig":"12"},{"size":464,"mtime":1614509784379,"results":"19","hashOfConfig":"12"},{"size":454,"mtime":1614509777542,"results":"20","hashOfConfig":"12"},{"size":1625,"mtime":1614509765410,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1htlbej",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"/home/elgohary/Noran-Task/insta-weather/client/src/index.js",[],["49","50"],"/home/elgohary/Noran-Task/insta-weather/client/src/App.js",[],"/home/elgohary/Noran-Task/insta-weather/client/src/reportWebVitals.js",[],"/home/elgohary/Noran-Task/insta-weather/client/src/components/Container.js",["51","52"],"/home/elgohary/Noran-Task/insta-weather/client/src/components/Header.js",["53","54"],"import React, { useState } from \"react\";\nconst Header = ({parentCallback}) => {\n    \n    const [tempType,setTempType]=useState('fe');\n    const handleChangeTempType = (type)=>{\n       if(tempType !== type){\n           setTempType(type);\n           parentCallback(type);\n       }\n    }\n return (\n      <div className=\"header\">\n      <span className=\"header-logo\">Instaweather</span>\n      <div className=\"header-tempType\">\n          <span className={`tempType-item ${tempType == \"si\" && \"active\"}`}  onClick={() => handleChangeTempType('si')}>c</span>\n          <span className=\"tempType-sep\"></span>\n          <span className={`tempType-item ${tempType == \"fe\" && \"active\"}`} onClick={() => handleChangeTempType('fe')}>f</span>\n      </div>\n      </div>\n    );\n};\nexport default Header;","/home/elgohary/Noran-Task/insta-weather/client/src/components/MainBanner.js",["55","56"],"import React from \"react\";\n\nconst MainBanner = (props) => {\n \n  const images = require.context(\"../../public/weather-icons\", true);\n\n  const { city, date, forcast } = props;\n  return (\n    <div className=\"mainBanner\">\n      <div className=\"mainBanner-cont--left\">\n        <h1 className=\"mainBanner-city\">{city}</h1>\n        <h5 className=\"mainBanner-date\">{date}</h5>\n        <div className=\"mainBanner-icon\">\n          <img\n            src={`${process.env.PUBLIC_URL}/weather-icons/${forcast.currently.icon}.svg`}\n          />\n        </div>\n        <h3 className=\"mainBanner-summary\">{forcast.currently.summary}</h3>\n      </div>\n      <div className=\"mainBanner-cont--right\">\n        <h2 className=\"mainBanner-temp\"> {Math.round(forcast.currently.temperature)}° </h2>\n        <p className=\"mainBanner-temps\">\n          {Math.round(forcast.daily.data[0].temperatureHigh)}° /{\" \"}\n          {Math.round(forcast.daily.data[0].temperatureLow)}°\n        </p>\n        <p className=\"mainBanner-details\">{forcast.daily.data[0].summary}</p>\n      </div>\n    </div>\n  );\n};\nexport default MainBanner;\n","/home/elgohary/Noran-Task/insta-weather/client/src/components/Forcast.js",["57","58","59"],"import React, { useState } from \"react\";\nimport DailyForcast from \"components/DailyForcast\";\nimport HourlyForcast from \"components/HourlyForcast\";\n\nconst Forcast = (props) => {\n  const { daily, hourly } = props;\n  const [activeType, setActiveType] = useState(\"hourly\");\n\n  const handlePanalToggle = (type) => {\n    if(activeType !== type){\n        setActiveType(type);\n    }\n  };\n  return (\n    <div className=\"forcastPanal\">\n      <div className=\"forcastPanal-nav\">\n        <span\n          onClick={() => handlePanalToggle('hourly')}\n          className={`${activeType == \"hourly\" && \"active\"} type-item`}\n        >\n          Hourly\n        </span>\n        <span\n           onClick={() => handlePanalToggle('daily')}\n          className={`${activeType == \"daily\" && \"active\"} type-item`}\n        >\n          Daily\n        </span>\n      </div>\n      {activeType == \"hourly\" ? (\n        <div className=\"forcastPanal-item\">\n          <HourlyForcast hourly={hourly} />\n        </div>\n      ) : (\n        <div className=\"forcasrPanal-item\">\n          <DailyForcast daily={daily} />\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Forcast;\n","/home/elgohary/Noran-Task/insta-weather/client/src/components/DailyForcast.js",["60"],"import React from \"react\";\nimport ForcastCard from \"components/ForcastCard\";\nconst DailyForcast = (props) => {\n  const { daily } = props;\n  return (\n    <ul className=\"panal panal-daily\">\n      {daily.data.map((item, key) => (\n        <li key={key}>\n          <ForcastCard type=\"daily\" temp={[item.temperatureHigh,item.temperatureLow]} icon={item.icon}  title={key==0 ? \"Today\": item.time} />\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default DailyForcast;\n","/home/elgohary/Noran-Task/insta-weather/client/src/components/HourlyForcast.js",["61"],"import React from \"react\";\nimport ForcastCard from \"components/ForcastCard\";\nconst HourlyForcast = (props) => {\n  const { hourly } = props;\n  return (\n    <ul className=\"panal panal-hourly\">\n      {hourly.data.slice(0, 24).map((item,key) => (\n        <li key={key}>\n          <ForcastCard type=\"hourly\" temp={item.temperature} icon={item.icon} title={ key==0 ? \"Now\": item.time} />\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default HourlyForcast;\n","/home/elgohary/Noran-Task/insta-weather/client/src/components/ForcastCard.js",["62","63","64","65","66","67"],"import React, { useEffect, useState } from \"react\";\n\n\nconst ForcastCard = (props) => {\n    const images = require.context('../../public/weather-icons', true);\n\n  const { icon, temp, title, type } = props;\n  const [cardTitle, setCardTitle] = useState(\"\");\n  \n  const unixToDay = (unix_timestamp) => {\n    let i = 0;\n    let data = { list: [ { timeStamp: unix_timestamp } ] };\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; \n    let dayNum = new Date(data.list[i].timeStamp * 1000).getDay();\n    let dayName = days[dayNum];\n    return dayName;\n };\n\n const unixToTime = (unix_timestamp) => {\n    let date = new Date(unix_timestamp * 1000);\n    let hours = (date.getHours()) < 10 ? \"0\" + date.getHours() : date.getHours() ;\n    let formattedHour = hours+\":00\";\n    return formattedHour;\n  };\n  useEffect(() => {\n    if (type == \"daily\") {\n      if(title !== \"Today\"){\n        let date = unixToDay(title);\n        setCardTitle(date);\n      }\n      else{\n        setCardTitle(title);\n      }\n    }  if (type == \"hourly\") {\n      if(title !== \"Now\"){\n        let time = unixToTime(title);\n        setCardTitle(time);\n      }\n      else{\n        setCardTitle(title);\n      }\n    }\n  }, []);\n\n  return (\n    <div className=\"panal-item\">\n      <h3>{cardTitle}</h3>\n      <div className=\"panal-item-img\">\n\n        <img src={`${process.env.PUBLIC_URL}/weather-icons/${icon}.svg`}  />\n      </div>\n      {type==\"hourly\" ?\n      <span>{Math.round(temp)}°</span>\n      :\n      <span>{Math.round(temp[0])}° / {Math.round(temp[1])}°</span>\n  }\n    </div>\n  );\n};\nexport default ForcastCard;\n",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":8,"column":10,"nodeType":"74","messageId":"75","endLine":8,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":131,"column":9,"nodeType":"78","endLine":131,"endColumn":57},{"ruleId":"79","severity":1,"message":"80","line":15,"column":54,"nodeType":"81","messageId":"82","endLine":15,"endColumn":56},{"ruleId":"79","severity":1,"message":"80","line":17,"column":54,"nodeType":"81","messageId":"82","endLine":17,"endColumn":56},{"ruleId":"72","severity":1,"message":"83","line":5,"column":9,"nodeType":"74","messageId":"75","endLine":5,"endColumn":15},{"ruleId":"76","severity":1,"message":"77","line":14,"column":11,"nodeType":"78","endLine":16,"endColumn":13},{"ruleId":"79","severity":1,"message":"80","line":19,"column":36,"nodeType":"81","messageId":"82","endLine":19,"endColumn":38},{"ruleId":"79","severity":1,"message":"80","line":25,"column":36,"nodeType":"81","messageId":"82","endLine":25,"endColumn":38},{"ruleId":"79","severity":1,"message":"80","line":30,"column":19,"nodeType":"81","messageId":"82","endLine":30,"endColumn":21},{"ruleId":"79","severity":1,"message":"80","line":9,"column":115,"nodeType":"81","messageId":"82","endLine":9,"endColumn":117},{"ruleId":"79","severity":1,"message":"80","line":9,"column":90,"nodeType":"81","messageId":"82","endLine":9,"endColumn":92},{"ruleId":"72","severity":1,"message":"83","line":5,"column":11,"nodeType":"74","messageId":"75","endLine":5,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":26,"column":14,"nodeType":"81","messageId":"82","endLine":26,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":34,"column":17,"nodeType":"81","messageId":"82","endLine":34,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":43,"column":6,"nodeType":"86","endLine":43,"endColumn":8,"suggestions":"87"},{"ruleId":"76","severity":1,"message":"77","line":50,"column":9,"nodeType":"78","endLine":50,"endColumn":77},{"ruleId":"79","severity":1,"message":"80","line":52,"column":12,"nodeType":"81","messageId":"82","endLine":52,"endColumn":14},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'geolocationLoaded' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'images' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'title' and 'type'. Either include them or remove the dependency array.","ArrayExpression",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [title, type]",{"range":"93","text":"94"},[1226,1228],"[title, type]"]